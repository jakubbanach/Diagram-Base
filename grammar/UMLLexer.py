# Generated from grammar/UML.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,71,494,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,
        1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,4,56,413,8,56,
        11,56,12,56,414,1,56,1,56,1,57,1,57,1,57,1,57,5,57,423,8,57,10,57,
        12,57,426,9,57,1,57,1,57,1,57,1,57,1,58,4,58,433,8,58,11,58,12,58,
        434,1,58,5,58,438,8,58,10,58,12,58,441,9,58,1,59,1,59,4,59,445,8,
        59,11,59,12,59,446,1,59,5,59,450,8,59,10,59,12,59,453,9,59,3,59,
        455,8,59,1,60,4,60,458,8,60,11,60,12,60,459,1,60,5,60,463,8,60,10,
        60,12,60,466,9,60,1,61,1,61,5,61,470,8,61,10,61,12,61,473,9,61,1,
        61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,
        67,1,68,1,68,1,69,1,69,1,70,1,70,0,0,71,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,
        70,141,71,1,0,6,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,34,34,503,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
        0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
        0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,
        0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,
        139,1,0,0,0,0,141,1,0,0,0,1,143,1,0,0,0,3,157,1,0,0,0,5,163,1,0,
        0,0,7,173,1,0,0,0,9,178,1,0,0,0,11,187,1,0,0,0,13,189,1,0,0,0,15,
        191,1,0,0,0,17,193,1,0,0,0,19,195,1,0,0,0,21,199,1,0,0,0,23,206,
        1,0,0,0,25,213,1,0,0,0,27,218,1,0,0,0,29,224,1,0,0,0,31,228,1,0,
        0,0,33,231,1,0,0,0,35,235,1,0,0,0,37,239,1,0,0,0,39,243,1,0,0,0,
        41,247,1,0,0,0,43,251,1,0,0,0,45,255,1,0,0,0,47,258,1,0,0,0,49,260,
        1,0,0,0,51,269,1,0,0,0,53,275,1,0,0,0,55,280,1,0,0,0,57,284,1,0,
        0,0,59,288,1,0,0,0,61,292,1,0,0,0,63,296,1,0,0,0,65,304,1,0,0,0,
        67,314,1,0,0,0,69,323,1,0,0,0,71,327,1,0,0,0,73,334,1,0,0,0,75,338,
        1,0,0,0,77,342,1,0,0,0,79,346,1,0,0,0,81,350,1,0,0,0,83,354,1,0,
        0,0,85,358,1,0,0,0,87,361,1,0,0,0,89,366,1,0,0,0,91,370,1,0,0,0,
        93,374,1,0,0,0,95,383,1,0,0,0,97,387,1,0,0,0,99,393,1,0,0,0,101,
        395,1,0,0,0,103,397,1,0,0,0,105,399,1,0,0,0,107,402,1,0,0,0,109,
        405,1,0,0,0,111,408,1,0,0,0,113,412,1,0,0,0,115,418,1,0,0,0,117,
        432,1,0,0,0,119,454,1,0,0,0,121,457,1,0,0,0,123,467,1,0,0,0,125,
        476,1,0,0,0,127,478,1,0,0,0,129,480,1,0,0,0,131,482,1,0,0,0,133,
        484,1,0,0,0,135,486,1,0,0,0,137,488,1,0,0,0,139,490,1,0,0,0,141,
        492,1,0,0,0,143,144,5,33,0,0,144,145,5,99,0,0,145,146,5,108,0,0,
        146,147,5,97,0,0,147,148,5,115,0,0,148,149,5,115,0,0,149,150,5,100,
        0,0,150,151,5,105,0,0,151,152,5,97,0,0,152,153,5,103,0,0,153,154,
        5,114,0,0,154,155,5,97,0,0,155,156,5,109,0,0,156,2,1,0,0,0,157,158,
        5,99,0,0,158,159,5,108,0,0,159,160,5,97,0,0,160,161,5,115,0,0,161,
        162,5,115,0,0,162,4,1,0,0,0,163,164,5,105,0,0,164,165,5,110,0,0,
        165,166,5,116,0,0,166,167,5,101,0,0,167,168,5,114,0,0,168,169,5,
        102,0,0,169,170,5,97,0,0,170,171,5,99,0,0,171,172,5,101,0,0,172,
        6,1,0,0,0,173,174,5,101,0,0,174,175,5,110,0,0,175,176,5,117,0,0,
        176,177,5,109,0,0,177,8,1,0,0,0,178,179,5,97,0,0,179,180,5,98,0,
        0,180,181,5,115,0,0,181,182,5,116,0,0,182,183,5,114,0,0,183,184,
        5,97,0,0,184,185,5,99,0,0,185,186,5,116,0,0,186,10,1,0,0,0,187,188,
        5,43,0,0,188,12,1,0,0,0,189,190,5,45,0,0,190,14,1,0,0,0,191,192,
        5,35,0,0,192,16,1,0,0,0,193,194,5,126,0,0,194,18,1,0,0,0,195,196,
        5,105,0,0,196,197,5,110,0,0,197,198,5,116,0,0,198,20,1,0,0,0,199,
        200,5,115,0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,105,
        0,0,203,204,5,110,0,0,204,205,5,103,0,0,205,22,1,0,0,0,206,207,5,
        100,0,0,207,208,5,111,0,0,208,209,5,117,0,0,209,210,5,98,0,0,210,
        211,5,108,0,0,211,212,5,101,0,0,212,24,1,0,0,0,213,214,5,99,0,0,
        214,215,5,104,0,0,215,216,5,97,0,0,216,217,5,114,0,0,217,26,1,0,
        0,0,218,219,5,102,0,0,219,220,5,108,0,0,220,221,5,111,0,0,221,222,
        5,97,0,0,222,223,5,116,0,0,223,28,1,0,0,0,224,225,5,46,0,0,225,226,
        5,46,0,0,226,227,5,46,0,0,227,30,1,0,0,0,228,229,5,45,0,0,229,230,
        5,45,0,0,230,32,1,0,0,0,231,232,5,45,0,0,232,233,5,45,0,0,233,234,
        5,62,0,0,234,34,1,0,0,0,235,236,5,60,0,0,236,237,5,45,0,0,237,238,
        5,45,0,0,238,36,1,0,0,0,239,240,5,45,0,0,240,241,5,45,0,0,241,242,
        5,111,0,0,242,38,1,0,0,0,243,244,5,111,0,0,244,245,5,45,0,0,245,
        246,5,45,0,0,246,40,1,0,0,0,247,248,5,45,0,0,248,249,5,45,0,0,249,
        250,5,42,0,0,250,42,1,0,0,0,251,252,5,42,0,0,252,253,5,45,0,0,253,
        254,5,45,0,0,254,44,1,0,0,0,255,256,5,46,0,0,256,257,5,46,0,0,257,
        46,1,0,0,0,258,259,5,42,0,0,259,48,1,0,0,0,260,261,5,33,0,0,261,
        262,5,117,0,0,262,263,5,115,0,0,263,264,5,101,0,0,264,265,5,99,0,
        0,265,266,5,97,0,0,266,267,5,115,0,0,267,268,5,101,0,0,268,50,1,
        0,0,0,269,270,5,97,0,0,270,271,5,99,0,0,271,272,5,116,0,0,272,273,
        5,111,0,0,273,274,5,114,0,0,274,52,1,0,0,0,275,276,5,99,0,0,276,
        277,5,97,0,0,277,278,5,115,0,0,278,279,5,101,0,0,279,54,1,0,0,0,
        280,281,5,45,0,0,281,282,5,105,0,0,282,283,5,62,0,0,283,56,1,0,0,
        0,284,285,5,60,0,0,285,286,5,105,0,0,286,287,5,45,0,0,287,58,1,0,
        0,0,288,289,5,45,0,0,289,290,5,101,0,0,290,291,5,62,0,0,291,60,1,
        0,0,0,292,293,5,60,0,0,293,294,5,101,0,0,294,295,5,45,0,0,295,62,
        1,0,0,0,296,297,5,112,0,0,297,298,5,97,0,0,298,299,5,99,0,0,299,
        300,5,107,0,0,300,301,5,97,0,0,301,302,5,103,0,0,302,303,5,101,0,
        0,303,64,1,0,0,0,304,305,5,33,0,0,305,306,5,115,0,0,306,307,5,101,
        0,0,307,308,5,113,0,0,308,309,5,117,0,0,309,310,5,101,0,0,310,311,
        5,110,0,0,311,312,5,99,0,0,312,313,5,101,0,0,313,66,1,0,0,0,314,
        315,5,108,0,0,315,316,5,105,0,0,316,317,5,102,0,0,317,318,5,101,
        0,0,318,319,5,108,0,0,319,320,5,105,0,0,320,321,5,110,0,0,321,322,
        5,101,0,0,322,68,1,0,0,0,323,324,5,110,0,0,324,325,5,101,0,0,325,
        326,5,119,0,0,326,70,1,0,0,0,327,328,5,100,0,0,328,329,5,101,0,0,
        329,330,5,108,0,0,330,331,5,101,0,0,331,332,5,116,0,0,332,333,5,
        101,0,0,333,72,1,0,0,0,334,335,5,61,0,0,335,336,5,61,0,0,336,337,
        5,62,0,0,337,74,1,0,0,0,338,339,5,60,0,0,339,340,5,61,0,0,340,341,
        5,61,0,0,341,76,1,0,0,0,342,343,5,46,0,0,343,344,5,46,0,0,344,345,
        5,62,0,0,345,78,1,0,0,0,346,347,5,60,0,0,347,348,5,46,0,0,348,349,
        5,46,0,0,349,80,1,0,0,0,350,351,5,45,0,0,351,352,5,42,0,0,352,353,
        5,62,0,0,353,82,1,0,0,0,354,355,5,60,0,0,355,356,5,42,0,0,356,357,
        5,45,0,0,357,84,1,0,0,0,358,359,5,105,0,0,359,360,5,102,0,0,360,
        86,1,0,0,0,361,362,5,101,0,0,362,363,5,108,0,0,363,364,5,115,0,0,
        364,365,5,101,0,0,365,88,1,0,0,0,366,367,5,112,0,0,367,368,5,97,
        0,0,368,369,5,114,0,0,369,90,1,0,0,0,370,371,5,97,0,0,371,372,5,
        110,0,0,372,373,5,100,0,0,373,92,1,0,0,0,374,375,5,99,0,0,375,376,
        5,114,0,0,376,377,5,105,0,0,377,378,5,116,0,0,378,379,5,105,0,0,
        379,380,5,99,0,0,380,381,5,97,0,0,381,382,5,108,0,0,382,94,1,0,0,
        0,383,384,5,102,0,0,384,385,5,111,0,0,385,386,5,114,0,0,386,96,1,
        0,0,0,387,388,5,119,0,0,388,389,5,104,0,0,389,390,5,105,0,0,390,
        391,5,108,0,0,391,392,5,101,0,0,392,98,1,0,0,0,393,394,5,33,0,0,
        394,100,1,0,0,0,395,396,5,60,0,0,396,102,1,0,0,0,397,398,5,62,0,
        0,398,104,1,0,0,0,399,400,5,60,0,0,400,401,5,61,0,0,401,106,1,0,
        0,0,402,403,5,62,0,0,403,404,5,61,0,0,404,108,1,0,0,0,405,406,5,
        33,0,0,406,407,5,61,0,0,407,110,1,0,0,0,408,409,5,61,0,0,409,410,
        5,61,0,0,410,112,1,0,0,0,411,413,7,0,0,0,412,411,1,0,0,0,413,414,
        1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,
        6,56,0,0,417,114,1,0,0,0,418,419,5,47,0,0,419,420,5,47,0,0,420,424,
        1,0,0,0,421,423,9,0,0,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,428,
        5,10,0,0,428,429,1,0,0,0,429,430,6,57,0,0,430,116,1,0,0,0,431,433,
        7,1,0,0,432,431,1,0,0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,
        1,0,0,0,435,439,1,0,0,0,436,438,7,2,0,0,437,436,1,0,0,0,438,441,
        1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,118,1,0,0,0,441,439,
        1,0,0,0,442,455,5,48,0,0,443,445,7,3,0,0,444,443,1,0,0,0,445,446,
        1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,451,1,0,0,0,448,450,
        7,4,0,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,
        1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,454,442,1,0,0,0,454,444,
        1,0,0,0,455,120,1,0,0,0,456,458,7,3,0,0,457,456,1,0,0,0,458,459,
        1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,464,1,0,0,0,461,463,
        7,4,0,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,
        1,0,0,0,465,122,1,0,0,0,466,464,1,0,0,0,467,471,5,34,0,0,468,470,
        8,5,0,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,
        1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,34,0,0,475,124,
        1,0,0,0,476,477,5,91,0,0,477,126,1,0,0,0,478,479,5,93,0,0,479,128,
        1,0,0,0,480,481,5,123,0,0,481,130,1,0,0,0,482,483,5,125,0,0,483,
        132,1,0,0,0,484,485,5,40,0,0,485,134,1,0,0,0,486,487,5,41,0,0,487,
        136,1,0,0,0,488,489,5,44,0,0,489,138,1,0,0,0,490,491,5,59,0,0,491,
        140,1,0,0,0,492,493,5,58,0,0,493,142,1,0,0,0,11,0,414,424,434,439,
        446,451,454,459,464,471,1,6,0,0
    ]

class UMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS_START = 1
    CLASS = 2
    INTERFACE = 3
    ENUM = 4
    ABSTRACT = 5
    PUBLIC_SCOPE = 6
    PRIVATE_SCOPE = 7
    PROTECTED_SCOPE = 8
    PACKAGE_SCOPE = 9
    INT_TYPE = 10
    STRING_TYPE = 11
    DOUBLE_TYPE = 12
    CHAR_TYPE = 13
    FLOAT_TYPE = 14
    DEPENDENCY = 15
    ASSOCIATION = 16
    INHERITANCE_RIGHT = 17
    INHERITANCE_LEFT = 18
    PARTIAL_AGGREGATION_RIGHT = 19
    PARTIAL_AGGREGATION_LEFT = 20
    FULL_AGGREGATION_RIGHT = 21
    FULL_AGGREGATION_LEFT = 22
    MULTIPLICITY_OPERATOR = 23
    MANY = 24
    USE_CASE_START = 25
    ACTOR = 26
    CASE = 27
    INCLUDE_RIGHT = 28
    INCLUDE_LEFT = 29
    EXTEND_RIGHT = 30
    EXTEND_LEFT = 31
    PACKAGE = 32
    SEQUENCE_START = 33
    LIFELINE = 34
    NEW = 35
    DELETE = 36
    MESSAGE_RIGHT = 37
    MESSAGE_LEFT = 38
    BACK_MESSAGE_RIGHT = 39
    BACK_MESSAGE_LEFT = 40
    ASYNC_MESSAGE_RIGHT = 41
    ASYNC_MESSAGE_LEFT = 42
    IF = 43
    ELSE = 44
    PAR = 45
    AND = 46
    CRITICAL = 47
    FOR = 48
    WHILE = 49
    NOT = 50
    LESS_THAN = 51
    GREATER_THAN = 52
    LESS_THAN_OR_EQUAL = 53
    GREATER_THAN_OR_EQUAL = 54
    NOT_EQUAL = 55
    EQUAL = 56
    WHITESPACE = 57
    COMMENT = 58
    IDENTIFIER = 59
    NUMBER = 60
    NUMBER_NON_ZERO = 61
    STRING = 62
    LEFT_SQUARE_BRACKET = 63
    RIGHT_SQUARE_BRACKET = 64
    LEFT_CURLY_BRACKET = 65
    RIGHT_CURLY_BRACKET = 66
    LEFT_PARENTHESIS = 67
    RIGHT_PARENTHESIS = 68
    COMMA = 69
    LINE_END = 70
    COLON = 71

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!classdiagram'", "'class'", "'interface'", "'enum'", "'abstract'", 
            "'+'", "'-'", "'#'", "'~'", "'int'", "'string'", "'double'", 
            "'char'", "'float'", "'...'", "'--'", "'-->'", "'<--'", "'--o'", 
            "'o--'", "'--*'", "'*--'", "'..'", "'*'", "'!usecase'", "'actor'", 
            "'case'", "'-i>'", "'<i-'", "'-e>'", "'<e-'", "'package'", "'!sequence'", 
            "'lifeline'", "'new'", "'delete'", "'==>'", "'<=='", "'..>'", 
            "'<..'", "'-*>'", "'<*-'", "'if'", "'else'", "'par'", "'and'", 
            "'critical'", "'for'", "'while'", "'!'", "'<'", "'>'", "'<='", 
            "'>='", "'!='", "'=='", "'['", "']'", "'{'", "'}'", "'('", "')'", 
            "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS_START", "CLASS", "INTERFACE", "ENUM", "ABSTRACT", "PUBLIC_SCOPE", 
            "PRIVATE_SCOPE", "PROTECTED_SCOPE", "PACKAGE_SCOPE", "INT_TYPE", 
            "STRING_TYPE", "DOUBLE_TYPE", "CHAR_TYPE", "FLOAT_TYPE", "DEPENDENCY", 
            "ASSOCIATION", "INHERITANCE_RIGHT", "INHERITANCE_LEFT", "PARTIAL_AGGREGATION_RIGHT", 
            "PARTIAL_AGGREGATION_LEFT", "FULL_AGGREGATION_RIGHT", "FULL_AGGREGATION_LEFT", 
            "MULTIPLICITY_OPERATOR", "MANY", "USE_CASE_START", "ACTOR", 
            "CASE", "INCLUDE_RIGHT", "INCLUDE_LEFT", "EXTEND_RIGHT", "EXTEND_LEFT", 
            "PACKAGE", "SEQUENCE_START", "LIFELINE", "NEW", "DELETE", "MESSAGE_RIGHT", 
            "MESSAGE_LEFT", "BACK_MESSAGE_RIGHT", "BACK_MESSAGE_LEFT", "ASYNC_MESSAGE_RIGHT", 
            "ASYNC_MESSAGE_LEFT", "IF", "ELSE", "PAR", "AND", "CRITICAL", 
            "FOR", "WHILE", "NOT", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "NOT_EQUAL", "EQUAL", "WHITESPACE", 
            "COMMENT", "IDENTIFIER", "NUMBER", "NUMBER_NON_ZERO", "STRING", 
            "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", 
            "RIGHT_CURLY_BRACKET", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
            "COMMA", "LINE_END", "COLON" ]

    ruleNames = [ "CLASS_START", "CLASS", "INTERFACE", "ENUM", "ABSTRACT", 
                  "PUBLIC_SCOPE", "PRIVATE_SCOPE", "PROTECTED_SCOPE", "PACKAGE_SCOPE", 
                  "INT_TYPE", "STRING_TYPE", "DOUBLE_TYPE", "CHAR_TYPE", 
                  "FLOAT_TYPE", "DEPENDENCY", "ASSOCIATION", "INHERITANCE_RIGHT", 
                  "INHERITANCE_LEFT", "PARTIAL_AGGREGATION_RIGHT", "PARTIAL_AGGREGATION_LEFT", 
                  "FULL_AGGREGATION_RIGHT", "FULL_AGGREGATION_LEFT", "MULTIPLICITY_OPERATOR", 
                  "MANY", "USE_CASE_START", "ACTOR", "CASE", "INCLUDE_RIGHT", 
                  "INCLUDE_LEFT", "EXTEND_RIGHT", "EXTEND_LEFT", "PACKAGE", 
                  "SEQUENCE_START", "LIFELINE", "NEW", "DELETE", "MESSAGE_RIGHT", 
                  "MESSAGE_LEFT", "BACK_MESSAGE_RIGHT", "BACK_MESSAGE_LEFT", 
                  "ASYNC_MESSAGE_RIGHT", "ASYNC_MESSAGE_LEFT", "IF", "ELSE", 
                  "PAR", "AND", "CRITICAL", "FOR", "WHILE", "NOT", "LESS_THAN", 
                  "GREATER_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", 
                  "NOT_EQUAL", "EQUAL", "WHITESPACE", "COMMENT", "IDENTIFIER", 
                  "NUMBER", "NUMBER_NON_ZERO", "STRING", "LEFT_SQUARE_BRACKET", 
                  "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
                  "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "COMMA", "LINE_END", 
                  "COLON" ]

    grammarFileName = "UML.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


