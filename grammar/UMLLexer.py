# Generated from UML.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,4,0,58,8,0,11,0,12,0,59,1,0,5,0,63,8,0,10,0,12,0,66,9,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,4,5,119,8,5,11,5,12,5,120,1,5,5,5,124,8,5,10,5,12,5,127,9,
        5,1,6,1,6,4,6,131,8,6,11,6,12,6,132,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,170,8,9,11,9,
        12,9,171,1,9,5,9,175,8,9,10,9,12,9,178,9,9,3,9,180,8,9,1,9,3,9,183,
        8,9,3,9,185,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,12,4,12,201,8,12,11,12,12,12,202,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,214,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,242,8,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,252,8,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,3,17,262,8,17,3,17,264,8,17,1,18,1,18,4,
        18,268,8,18,11,18,12,18,269,1,18,5,18,273,8,18,10,18,12,18,276,9,
        18,3,18,278,8,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,
        5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,35,35,
        43,43,45,45,126,126,1,0,49,57,1,0,48,57,309,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,67,1,0,0,0,5,78,1,0,0,
        0,7,93,1,0,0,0,9,103,1,0,0,0,11,118,1,0,0,0,13,130,1,0,0,0,15,134,
        1,0,0,0,17,140,1,0,0,0,19,184,1,0,0,0,21,186,1,0,0,0,23,195,1,0,
        0,0,25,200,1,0,0,0,27,204,1,0,0,0,29,213,1,0,0,0,31,241,1,0,0,0,
        33,251,1,0,0,0,35,263,1,0,0,0,37,277,1,0,0,0,39,40,5,33,0,0,40,41,
        5,99,0,0,41,42,5,108,0,0,42,43,5,97,0,0,43,44,5,115,0,0,44,45,5,
        115,0,0,45,46,5,100,0,0,46,47,5,105,0,0,47,48,5,97,0,0,48,49,5,103,
        0,0,49,50,5,114,0,0,50,51,5,97,0,0,51,52,5,109,0,0,52,57,1,0,0,0,
        53,58,3,3,1,0,54,58,3,5,2,0,55,58,3,7,3,0,56,58,3,9,4,0,57,53,1,
        0,0,0,57,54,1,0,0,0,57,55,1,0,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,
        57,1,0,0,0,59,60,1,0,0,0,60,64,1,0,0,0,61,63,3,29,14,0,62,61,1,0,
        0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,2,1,0,0,0,66,64,
        1,0,0,0,67,68,5,99,0,0,68,69,5,108,0,0,69,70,5,97,0,0,70,71,5,115,
        0,0,71,72,5,115,0,0,72,73,1,0,0,0,73,74,3,11,5,0,74,75,5,123,0,0,
        75,76,3,13,6,0,76,77,5,125,0,0,77,4,1,0,0,0,78,79,5,105,0,0,79,80,
        5,110,0,0,80,81,5,116,0,0,81,82,5,101,0,0,82,83,5,114,0,0,83,84,
        5,102,0,0,84,85,5,97,0,0,85,86,5,99,0,0,86,87,5,101,0,0,87,88,1,
        0,0,0,88,89,3,11,5,0,89,90,5,123,0,0,90,91,3,13,6,0,91,92,5,125,
        0,0,92,6,1,0,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,96,5,117,0,0,
        96,97,5,109,0,0,97,98,1,0,0,0,98,99,3,11,5,0,99,100,5,123,0,0,100,
        101,3,25,12,0,101,102,5,125,0,0,102,8,1,0,0,0,103,104,5,97,0,0,104,
        105,5,98,0,0,105,106,5,115,0,0,106,107,5,116,0,0,107,108,5,114,0,
        0,108,109,5,97,0,0,109,110,5,99,0,0,110,111,5,116,0,0,111,112,1,
        0,0,0,112,113,3,11,5,0,113,114,5,123,0,0,114,115,3,13,6,0,115,116,
        5,125,0,0,116,10,1,0,0,0,117,119,7,0,0,0,118,117,1,0,0,0,119,120,
        1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,125,1,0,0,0,122,124,
        7,1,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,
        1,0,0,0,126,12,1,0,0,0,127,125,1,0,0,0,128,131,3,15,7,0,129,131,
        3,21,10,0,130,128,1,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,
        1,0,0,0,132,133,1,0,0,0,133,14,1,0,0,0,134,135,3,17,8,0,135,136,
        3,11,5,0,136,137,5,58,0,0,137,138,3,19,9,0,138,139,5,59,0,0,139,
        16,1,0,0,0,140,141,7,2,0,0,141,18,1,0,0,0,142,143,5,105,0,0,143,
        144,5,110,0,0,144,185,5,116,0,0,145,146,5,115,0,0,146,147,5,116,
        0,0,147,148,5,114,0,0,148,149,5,105,0,0,149,150,5,110,0,0,150,185,
        5,103,0,0,151,152,5,100,0,0,152,153,5,111,0,0,153,154,5,117,0,0,
        154,155,5,98,0,0,155,156,5,108,0,0,156,185,5,101,0,0,157,158,5,99,
        0,0,158,159,5,104,0,0,159,160,5,97,0,0,160,185,5,114,0,0,161,162,
        5,102,0,0,162,163,5,108,0,0,163,164,5,111,0,0,164,165,5,97,0,0,165,
        166,5,116,0,0,166,182,1,0,0,0,167,179,5,91,0,0,168,170,7,3,0,0,169,
        168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,
        176,1,0,0,0,173,175,7,4,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
        174,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,179,
        169,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,183,5,93,0,0,182,
        167,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,142,1,0,0,0,184,
        145,1,0,0,0,184,151,1,0,0,0,184,157,1,0,0,0,184,161,1,0,0,0,185,
        20,1,0,0,0,186,187,3,17,8,0,187,188,3,11,5,0,188,189,5,40,0,0,189,
        190,3,23,11,0,190,191,5,41,0,0,191,192,5,58,0,0,192,193,3,19,9,0,
        193,194,5,59,0,0,194,22,1,0,0,0,195,196,3,11,5,0,196,197,5,58,0,
        0,197,198,3,19,9,0,198,24,1,0,0,0,199,201,3,27,13,0,200,199,1,0,
        0,0,201,202,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,26,1,0,0,
        0,204,205,3,11,5,0,205,206,5,59,0,0,206,28,1,0,0,0,207,208,3,11,
        5,0,208,209,3,31,15,0,209,214,1,0,0,0,210,211,3,33,16,0,211,212,
        5,59,0,0,212,214,1,0,0,0,213,207,1,0,0,0,213,210,1,0,0,0,214,30,
        1,0,0,0,215,216,5,123,0,0,216,217,3,35,17,0,217,218,5,125,0,0,218,
        219,5,46,0,0,219,220,5,46,0,0,220,242,1,0,0,0,221,222,5,45,0,0,222,
        242,5,45,0,0,223,224,5,111,0,0,224,225,5,45,0,0,225,242,5,45,0,0,
        226,227,5,45,0,0,227,228,5,45,0,0,228,242,5,111,0,0,229,230,5,42,
        0,0,230,231,5,45,0,0,231,242,5,45,0,0,232,233,5,45,0,0,233,234,5,
        45,0,0,234,235,5,42,0,0,235,236,1,0,0,0,236,237,3,11,5,0,237,238,
        5,123,0,0,238,239,3,35,17,0,239,240,5,125,0,0,240,242,1,0,0,0,241,
        215,1,0,0,0,241,221,1,0,0,0,241,223,1,0,0,0,241,226,1,0,0,0,241,
        229,1,0,0,0,241,232,1,0,0,0,242,32,1,0,0,0,243,244,5,60,0,0,244,
        245,5,45,0,0,245,252,5,45,0,0,246,247,5,45,0,0,247,248,5,45,0,0,
        248,249,5,62,0,0,249,250,1,0,0,0,250,252,3,11,5,0,251,243,1,0,0,
        0,251,246,1,0,0,0,252,34,1,0,0,0,253,264,3,37,18,0,254,262,3,37,
        18,0,255,256,5,42,0,0,256,257,5,46,0,0,257,258,5,46,0,0,258,259,
        1,0,0,0,259,262,3,37,18,0,260,262,5,42,0,0,261,254,1,0,0,0,261,255,
        1,0,0,0,261,260,1,0,0,0,262,264,1,0,0,0,263,253,1,0,0,0,263,261,
        1,0,0,0,264,36,1,0,0,0,265,278,5,48,0,0,266,268,7,3,0,0,267,266,
        1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,274,
        1,0,0,0,271,273,7,4,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,
        1,0,0,0,274,275,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,277,265,
        1,0,0,0,277,267,1,0,0,0,278,38,1,0,0,0,22,0,57,59,64,120,125,130,
        132,171,176,179,182,184,202,213,241,251,261,263,269,274,277,0
    ]

class UMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DiagramKlas = 1
    Klasa = 2
    Interface = 3
    Enum = 4
    Abstract = 5
    Nazwa = 6
    Inside = 7
    Pole = 8
    Zasięg = 9
    Typ = 10
    Metoda = 11
    Argumenty = 12
    InsideEnum = 13
    PoleEnum = 14
    Związek = 15
    ZKrotnością = 16
    Dziedziczenie = 17
    Krotność = 18
    Liczba = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "DiagramKlas", "Klasa", "Interface", "Enum", "Abstract", "Nazwa", 
            "Inside", "Pole", "Zasi\u0004g", "Typ", "Metoda", "Argumenty", 
            "InsideEnum", "PoleEnum", "Zwi\u0003zek", "ZKrotno\u0007ci\u000A", 
            "Dziedziczenie", "Krotno\u0006\u0007", "Liczba" ]

    ruleNames = [ "DiagramKlas", "Klasa", "Interface", "Enum", "Abstract", 
                  "Nazwa", "Inside", "Pole", "Zasięg", "Typ", "Metoda", 
                  "Argumenty", "InsideEnum", "PoleEnum", "Związek", "ZKrotnością", 
                  "Dziedziczenie", "Krotność", "Liczba" ]

    grammarFileName = "UML.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


